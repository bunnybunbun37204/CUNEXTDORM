// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ======================
// ENUMS
// ======================
enum UserRole {
  TENANT
  OWNER
  ADMIN
}

enum BedLabel {
  A
  B
  C
  D
}

enum BedStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum FacilityType {
  AIRCON
  FRIDGE
  WATER_HEATER
  FURNITURE
  LIGHTING
  OTHER
}

enum RepairType {
  PLUMBING
  ELECTRICAL
  FURNITURE_REPAIR
  APPLIANCE
  OTHER
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum NotificationType {
  PAYMENT_REMINDER
  MAINTENANCE_UPDATE
  CONTRACT_ALERT
  SYSTEM_ANNOUNCEMENT
  OTHER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  ESSAY
}

// ======================
// MODELS
// ======================
model User {
  id                String               @id @default(uuid())
  email             String               @unique
  name              String
  role              UserRole             @default(TENANT)
  phone             String?
  academicYear      String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  // Relations
  ownedRooms        DormRoom[]           @relation("DormOwner")
  notifications     Notification[]
  reportedRepairs   MaintenanceLog[]     @relation("ReportedMaintenance")
  assignedRepairs   MaintenanceLog[]     @relation("AssignedTechnician")
  agreements        RentalAgreement[]
  beds              Bed[]
  activities        DormActivity[]       @relation("ActivityParticipants")
  applications      ExtensionApplication[]
}

model DormBuilding {
  id          String       @id @default(uuid())
  name        String       @unique
  address     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  rooms       DormRoom[] 
}

model DormRoom {
  id                String            @id @default(uuid())
  buildingId        String
  roomNumber        String
  basePrice         Float
  waterPrice        Float             @default(20.0)
  electricPrice     Float             @default(8.0)
  depositAmount     Float             @default(3000.0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  building          DormBuilding      @relation(fields: [buildingId], references: [id])
  owners            User[]            @relation("DormOwner")
  beds              Bed[]
  facilities        Facility[]
  maintenanceLogs   MaintenanceLog[]
}

model Bed {
  id              String           @id @default(uuid())
  label           BedLabel
  status          BedStatus        @default(AVAILABLE)
  roomId          String
  currentUserId   String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  room            DormRoom         @relation(fields: [roomId], references: [id])
  currentUser     User?            @relation(fields: [currentUserId], references: [id])
  agreements      RentalAgreement[]
  maintenanceLogs MaintenanceLog[]
}

model Facility {
  id          String           @id @default(uuid())
  type        FacilityType
  description String?
  status      String           @default("OPERATIONAL")
  roomId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  room            DormRoom         @relation(fields: [roomId], references: [id])
  maintenanceLogs MaintenanceLog[]
}

model MaintenanceLog {
  id           String           @id @default(uuid())
  description  String
  repairType   RepairType
  status       MaintenanceStatus @default(PENDING)
  roomId       String
  reportedById String
  technicianId String?
  facilityId   String?
  bedId        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  room        DormRoom         @relation(fields: [roomId], references: [id])
  reportedBy  User             @relation("ReportedMaintenance", fields: [reportedById], references: [id])
  technician  User?            @relation("AssignedTechnician", fields: [technicianId], references: [id])
  facility    Facility?        @relation(fields: [facilityId], references: [id])
  bed         Bed?             @relation(fields: [bedId], references: [id])
}

model RentalAgreement {
  id          String         @id @default(uuid())
  userId      String
  bedId       String
  startDate   DateTime
  endDate     DateTime
  monthlyRent Float
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  user        User           @relation(fields: [userId], references: [id])
  bed         Bed            @relation(fields: [bedId], references: [id])
  payments    RentPayment[]
}

model RentPayment {
  id             String           @id @default(uuid())
  agreementId    String
  month          DateTime
  waterUsed      Float?
  electricUsed   Float?
  totalAmount    Float
  status         PaymentStatus    @default(PENDING)
  paidAt         DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  agreement      RentalAgreement  @relation(fields: [agreementId], references: [id])
}

model Notification {
  id             String           @id @default(uuid())
  userId         String
  type           NotificationType
  title          String
  content        String
  isRead         Boolean          @default(false)
  relatedId      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  user           User             @relation(fields: [userId], references: [id])
}

// ======================
// NEW MODELS FOR EXTENSION SYSTEM
// ======================
model DormActivity {
  id          String               @id @default(uuid())
  name        String
  date        DateTime
  description String?
  maxPoints   Int                  @default(10)
  participants User[]              @relation("ActivityParticipants")
  applications ExtensionApplication[] @relation("ApplicationActivities")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model DormQuestion {
  id           String               @id @default(uuid())
  questionText String               @db.Text
  questionType QuestionType         @default(TEXT)
  isRequired   Boolean              @default(true)
  order        Int                  @default(1)
  academicYear String
  answers      ApplicationAnswer[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ExtensionApplication {
  id            String               @id @default(uuid())
  applicant     User                 @relation(fields: [applicantId], references: [id])
  applicantId   String
  academicYear  String
  status        ApplicationStatus    @default(PENDING)
  reason        String?              @db.Text
  answers       ApplicationAnswer[]
  activities    DormActivity[]       @relation("ApplicationActivities")
  submittedAt   DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

model ApplicationAnswer {
  id            String               @id @default(uuid())
  application   ExtensionApplication @relation(fields: [applicationId], references: [id])
  applicationId String
  question      DormQuestion         @relation(fields: [questionId], references: [id])
  questionId    String
  answerText    String               @db.Text
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}